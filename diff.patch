diff --git a/app/db/models/menus.py b/app/db/models/menus.py
index 9084c8f..c798534 100644
--- a/app/db/models/menus.py
+++ b/app/db/models/menus.py
@@ -1,5 +1,7 @@
-from sqlalchemy import Column, Float, ForeignKey, Integer, String
-from sqlalchemy.orm import relationship
+from typing import TYPE_CHECKING
+
+from sqlalchemy import Float, ForeignKey, String
+from sqlalchemy.orm import Mapped, mapped_column, relationship
 
 from app.db.database import Base
 
@@ -12,17 +14,24 @@ SQLAlchemy ORM models for the menu system:
 """
 
 
+if TYPE_CHECKING:
+    from app.db.models.orders import OrderItem
+    from app.db.models.restaurants import Restaurant
+
+
 class Menu(Base):
     __tablename__ = "menus"
 
-    id = Column(Integer, primary_key=True)
-    name = Column(String, nullable=False)
-    restaurant_id = Column(
-        Integer, ForeignKey("restaurants.id", ondelete="CASCADE"), nullable=False
+    id: Mapped[int] = mapped_column(primary_key=True)
+    name: Mapped[str] = mapped_column(String, nullable=False)
+    restaurant_id: Mapped[int] = mapped_column(
+        ForeignKey("restaurants.id", ondelete="CASCADE"), nullable=False
     )
 
-    restaurant = relationship("Restaurant", back_populates="menus")
-    items = relationship(
+    restaurant: Mapped["Restaurant"] = relationship(
+        "Restaurant", back_populates="menus"
+    )
+    items: Mapped[list["MenuItemMenu"]] = relationship(
         "MenuItemMenu", back_populates="menu", cascade="all, delete-orphan"
     )
 
@@ -30,28 +39,30 @@ class Menu(Base):
 class MenuItem(Base):
     __tablename__ = "menu_items"
 
-    id = Column(Integer, primary_key=True)
-    title = Column(String, nullable=False)
-    description = Column(String)
-    image_url = Column(String)
+    id: Mapped[int] = mapped_column(primary_key=True)
+    title: Mapped[str] = mapped_column(String, nullable=False)
+    description: Mapped[str | None] = mapped_column(String, nullable=True)
+    image_url: Mapped[str | None] = mapped_column(String, nullable=True)
 
-    menus = relationship(
+    menus: Mapped[list["MenuItemMenu"]] = relationship(
         "MenuItemMenu", back_populates="menu_item", cascade="all, delete-orphan"
     )
-    orders = relationship("OrderItem", back_populates="menu_item")
+    orders: Mapped[list["OrderItem"]] = relationship(
+        "OrderItem", back_populates="menu_item"
+    )
 
 
 class MenuItemMenu(Base):
     __tablename__ = "menu_item_menus"
 
-    id = Column(Integer, primary_key=True)
-    menu_id = Column(
-        Integer, ForeignKey("menus.id", ondelete="CASCADE"), nullable=False
+    id: Mapped[int] = mapped_column(primary_key=True)
+    menu_id: Mapped[int] = mapped_column(
+        ForeignKey("menus.id", ondelete="CASCADE"), nullable=False
     )
-    menu_item_id = Column(
-        Integer, ForeignKey("menu_items.id", ondelete="CASCADE"), nullable=False
+    menu_item_id: Mapped[int] = mapped_column(
+        ForeignKey("menu_items.id", ondelete="CASCADE"), nullable=False
     )
-    price = Column(Float, nullable=False)
+    price: Mapped[float] = mapped_column(Float, nullable=False)
 
-    menu = relationship("Menu", back_populates="items")
-    menu_item = relationship("MenuItem", back_populates="menus")
+    menu: Mapped["Menu"] = relationship("Menu", back_populates="items")
+    menu_item: Mapped["MenuItem"] = relationship("MenuItem", back_populates="menus")
diff --git a/app/db/models/orders.py b/app/db/models/orders.py
index 851cf5a..c4bcaaa 100644
--- a/app/db/models/orders.py
+++ b/app/db/models/orders.py
@@ -1,7 +1,10 @@
 import enum
+from typing import TYPE_CHECKING
 
-from sqlalchemy import Column, DateTime, Enum, Float, ForeignKey, Integer, String, func
-from sqlalchemy.orm import relationship
+from sqlalchemy import DateTime
+from sqlalchemy import Enum as PgEnum
+from sqlalchemy import Float, ForeignKey, String, func
+from sqlalchemy.orm import Mapped, mapped_column, relationship
 
 from app.db.database import Base
 
@@ -12,6 +15,11 @@ SQLAlchemy ORM models for the orders system:
 """
 
 
+if TYPE_CHECKING:
+    from app.db.models.menus import MenuItem
+    from app.db.models.restaurants import Restaurant
+
+
 class OrderStatus(enum.Enum):
     COMPLETED = "completed"
     CANCELLED = "cancelled"
@@ -20,18 +28,24 @@ class OrderStatus(enum.Enum):
 class Order(Base):
     __tablename__ = "orders"
 
-    id = Column(Integer, primary_key=True)
-    restaurant_id = Column(
-        Integer, ForeignKey("restaurants.id", ondelete="CASCADE"), nullable=False
+    id: Mapped[int] = mapped_column(primary_key=True)
+    restaurant_id: Mapped[int] = mapped_column(
+        ForeignKey("restaurants.id", ondelete="CASCADE"), nullable=False
+    )
+    customer_name: Mapped[str] = mapped_column(String, nullable=False)
+    total_price: Mapped[float] = mapped_column(Float, nullable=False)
+    status: Mapped[OrderStatus] = mapped_column(PgEnum(OrderStatus), nullable=False)
+    created_at: Mapped[DateTime] = mapped_column(
+        DateTime(timezone=True), server_default=func.now()
+    )
+    updated_at: Mapped[DateTime | None] = mapped_column(
+        DateTime(timezone=True), onupdate=func.now(), nullable=True
     )
-    customer_name = Column(String, nullable=False)
-    total_price = Column(Float, nullable=False)
-    status = Column(Enum(OrderStatus), nullable=False)
-    created_at = Column(DateTime(timezone=True), server_default=func.now())
-    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
-
-    restaurant = relationship("Restaurant", back_populates="orders")
-    items = relationship(
+
+    restaurant: Mapped["Restaurant"] = relationship(
+        "Restaurant", back_populates="orders"
+    )
+    items: Mapped[list["OrderItem"]] = relationship(
         "OrderItem", back_populates="order", cascade="all, delete-orphan"
     )
 
@@ -39,13 +53,15 @@ class Order(Base):
 class OrderItem(Base):
     __tablename__ = "order_items"
 
-    id = Column(Integer, primary_key=True)
-    order_id = Column(
-        Integer, ForeignKey("orders.id", ondelete="CASCADE"), nullable=False
+    id: Mapped[int] = mapped_column(primary_key=True)
+    order_id: Mapped[int] = mapped_column(
+        ForeignKey("orders.id", ondelete="CASCADE"), nullable=False
+    )
+    menu_item_id: Mapped[int] = mapped_column(
+        ForeignKey("menu_items.id"), nullable=False
     )
-    menu_item_id = Column(Integer, ForeignKey("menu_items.id"), nullable=False)
-    quantity = Column(Integer, nullable=False)
-    price_at_time = Column(Float, nullable=False)
+    quantity: Mapped[int] = mapped_column(nullable=False)
+    price_at_time: Mapped[float] = mapped_column(nullable=False)
 
-    order = relationship("Order", back_populates="items")
-    menu_item = relationship("MenuItem", back_populates="orders")
+    order: Mapped["Order"] = relationship("Order", back_populates="items")
+    menu_item: Mapped["MenuItem"] = relationship("MenuItem", back_populates="orders")
diff --git a/app/db/models/restaurants.py b/app/db/models/restaurants.py
index f0c9390..8bbd736 100644
--- a/app/db/models/restaurants.py
+++ b/app/db/models/restaurants.py
@@ -1,17 +1,24 @@
-from sqlalchemy import Column, ForeignKey, Integer, String
-from sqlalchemy.orm import relationship
+from typing import TYPE_CHECKING
+
+from sqlalchemy import ForeignKey, String
+from sqlalchemy.orm import Mapped, mapped_column, relationship
 
 from app.db.database import Base
 
+if TYPE_CHECKING:
+    from app.db.models.users import User
+
 
 class Restaurant(Base):
     __tablename__ = "restaurants"
 
-    id = Column(Integer, primary_key=True)
-    name = Column(String, nullable=False)
-    address = Column(String, nullable=False)
-    phone_number = Column(String, nullable=False)
+    id: Mapped[int] = mapped_column(primary_key=True)
+    name: Mapped[str] = mapped_column(String, nullable=False)
+    address: Mapped[str] = mapped_column(String, nullable=False)
+    phone_number: Mapped[str] = mapped_column(String, nullable=False)
 
     # restaurant must have a user
-    user_id = Column(Integer, ForeignKey("users.id"))
-    user = relationship("User", back_populates="restaurant", uselist=False)
+    user_id: Mapped[int] = mapped_column(ForeignKey("users.id"), nullable=False)
+    user: Mapped["User"] = relationship(
+        "User", back_populates="restaurant", uselist=False
+    )
diff --git a/app/db/models/users.py b/app/db/models/users.py
index b4d547c..3010b0e 100644
--- a/app/db/models/users.py
+++ b/app/db/models/users.py
@@ -1,16 +1,23 @@
-from sqlalchemy import Column, Integer, String
-from sqlalchemy.orm import relationship
+from typing import TYPE_CHECKING
+
+from sqlalchemy import String
+from sqlalchemy.orm import Mapped, mapped_column, relationship
 
 from app.db.database import Base
 
+if TYPE_CHECKING:
+    from app.db.models.restaurants import Restaurant
+
 
 class User(Base):
     __tablename__ = "users"
 
-    id = Column(Integer, primary_key=True)
-    username = Column(String, nullable=False, unique=True)
-    email = Column(String, nullable=False, unique=True)
-    hashed_password = Column(String, nullable=False)
+    id: Mapped[int] = mapped_column(primary_key=True)
+    username: Mapped[str] = mapped_column(String, nullable=False, unique=True)
+    email: Mapped[str] = mapped_column(String, nullable=False, unique=True)
+    hashed_password: Mapped[str] = mapped_column(String, nullable=False)
 
     # user does not have to have a restaurant
-    restaurant = relationship("Restaurant", back_populates="user", uselist=False)
+    restaurant: Mapped["Restaurant"] = relationship(
+        "Restaurant", back_populates="user", uselist=False
+    )
diff --git a/app/graphql/menu/types.py b/app/graphql/menu/types.py
index 41baac0..afb1422 100644
--- a/app/graphql/menu/types.py
+++ b/app/graphql/menu/types.py
@@ -6,4 +6,4 @@ class MenuItem:
     id: int
     title: str
     price: float
-    image: str
\ No newline at end of file
+    image: str
diff --git a/app/graphql/schema.py b/app/graphql/schema.py
index 0831b6c..8be6de5 100644
--- a/app/graphql/schema.py
+++ b/app/graphql/schema.py
@@ -1,4 +1,5 @@
 from typing import List
+
 import strawberry
 
 from app.graphql.menu.types import MenuItem
@@ -9,14 +10,30 @@ class Query:
     @strawberry.field
     def default_menu(self) -> List[MenuItem]:
         return [
-            MenuItem(id=1, title="Burger", price=8.99, image="https://placehold.co/400x300"),
-            MenuItem(id=2, title="Pizza", price=12.99, image="https://placehold.co/400x300"),
-            MenuItem(id=3, title="Fries", price=4.99, image="https://placehold.co/400x300"),
-            MenuItem(id=4, title="Salad", price=6.99, image="https://placehold.co/400x300"),
-            MenuItem(id=5, title="Soda", price=1.99, image="https://placehold.co/400x300"),
-            MenuItem(id=6, title="Ice Cream", price=3.99, image="https://placehold.co/400x300"),
+            MenuItem(
+                id=1, title="Burger", price=8.99, image="https://placehold.co/400x300"
+            ),
+            MenuItem(
+                id=2, title="Pizza", price=12.99, image="https://placehold.co/400x300"
+            ),
+            MenuItem(
+                id=3, title="Fries", price=4.99, image="https://placehold.co/400x300"
+            ),
+            MenuItem(
+                id=4, title="Salad", price=6.99, image="https://placehold.co/400x300"
+            ),
+            MenuItem(
+                id=5, title="Soda", price=1.99, image="https://placehold.co/400x300"
+            ),
+            MenuItem(
+                id=6,
+                title="Ice Cream",
+                price=3.99,
+                image="https://placehold.co/400x300",
+            ),
         ]
 
+
 @strawberry.type
 class Mutation:
     @strawberry.mutation
